# Time-stamp: <pdc 2004-06-11>

defaultAttrs table border=0
defaultAttrs tr valign=baseline align=left
defaultAttrs th align=left
defaultAttrs hr noshade size=1
defaultAttrs img border=0 alt=

########################################################################

set monthNames {Zero January February March April May June\
	July August September October November December}
set monthAbbrs {Z Jan. Feb. Mar. April May June\
	July Aug. Sept. Oct. Nov. Dec.}

# Given an entry name (as in 2002/20020304.e),
# return the archive name (as in 2002/03).
proc entryNameRetArName {entry} {
    set entry [file tail $entry]
    if {$entry < 20030501} {
	return [string range $entry 0 3]/[string range $entry 4 5]
    } else {
	return [string range $entry 0 3]/[string range $entry 4 5]/[string range $entry 6 7]
    }
}

# Given an archive name,
# return its title.
proc arNameRetTitle {arName} {
    global monthNames

    set mon [string range $arName 5 6]
    regsub "^0" $mon "" mon
    if {[string match */*/* $arName]} {
	set day [string range $arName 8 9]
	regsub "^0" $day "" day
	set title "$day [lindex $monthNames $mon] [string range $arName 0 3]"
    } else {
	set title "[lindex $monthNames $mon] [string range $arName 0 3]"
    }
    return $title
}

proc maybeUp {} {
    set xs [split [htmlOption subDir] /]
    set s [join [lrange {.. .. .. .. .. ..} 2 [llength $xs]] /]
    if {[string compare $s ""] != 0} {
	append s /
    }
    return $s
}

proc pdcMetadata {{entries {}}} {
    stylesheet -alternate [maybeUp]pdc.css title=Spirals
    stylesheet [maybeUp]2005/gentium.css title=Gentium
    stylesheet  -alternate [maybeUp]2005/lod.css "title=Light on Dark"
    emit "
<!--\[if lte IE 6]>
    <link rel=\"stylesheet\" type=\"text/css\" href=\"[maybeUp]2005/gentium-ie6.css\" title=\"Gentium\" />
<!\[endif]-->
"
    
    foreach e $entries {
        entryEmitMetadata $e
    }
}

# Generate HTML representing a breadcrumb trail.
# Arguments --
#  down -- the HTML text that separates each item in the trail
#    (e.g., an arrow).
#  extra (optional) -- extra links to go before 
#    the title of the current page.
#    Use this to interpose a local index page in the trail.
#    Each link should be an HTML 'a' element 
#    (as generated by the proc 'a').
proc emitTrail {down {extra {}}} {
    set dir [htmlOption rootDir]
    push p class=trail
    emit "[a $dir [img $dir/img/alleged-03@32x16.png \
	    align=absmiddle "alt=Alleged Literature"]]$down"
    set ds [split [htmlOption subDir] /]
    foreach d [lrange $ds 0 [expr [llength $ds] - 2]] {
	set dir [file dirname $dir]
	emit "[a $dir/ $d]$down"
    }
    if {[string compare [htmlInfo outFileName] index.html] == 0} {
	emit "[strong [lindex $ds end]]"
    } else {
	emit "[a ./ [lindex $ds end]]$down"
	foreach text $extra {
	    emit $text$down
	}
	emit "[strong [file root [htmlInfo outFileName]]]"
    }
    pop
}

proc allThoseLinks {} {
    set oldSite http://www.alleged.demon.co.uk/pdc
    
    if {[string compare pdc [htmlOption subDir]] == 0} { # Home-page-only stuff    
        if {0} { # Percy street teaser; no longer included
            div class=links {
                p [embed 2003/percy/teaser.svg id=percy type=image/svg+xml width=180 height=135 alt=flickr]
            }
        }

        div class=links { # Flickr badge
            h3 "Recent photos \[[abbr* "title=Scalar Vector Graphics" SVG]\]"
            p [embed 2004/flickr-badge.svg id=flickr type=image/svg+xml width=180 height=180 alt=flickr]
            p "[a http://www.flickr.com/photos/pdc/ "My photos on Flickr"]"
            p [small "In Mozilla Firefox&nbsp;1.5 you can click on the above image to
            visit my photostream.  Opera 9 is reported as working also.
            On Microsoft IEx&nbsp;6, Safarix&nbsp;1 andx&nbsp;2, you
            need [a http://www.adobe.com/svg/ Adobe\u2019s SVG Viewer plug-in].
            Apologies to non-SVG-equipped readers, who will see no picture at all;
            I might have used [abbr* "title=Hypertext Mark-Up Language" HTML]\u2019s 
            [code object] tag to supply a fall-back, but that 
            [a http://golem.ph.utexas.edu/~distler/blog/archives/000585.html is inconsistently implemented]
            and
            [a http://www.alleged.org.uk/pdc/2002/svg-object.html "can cause Safarix&nbsp;1 to crash"]
            so is interdict until 2008 or so.
            "]
        }
        
        foreach fileName {2006/livejournal.inc 2004/delicious.inc } {
            set input [open $fileName r]
            emit [read $input]
            close $input
        }

    }

    div class=links { # archive links
	archiveLinks
    }
    
    if {0} { # links to sections of the site
        dl class=links {
            dt "Entertainments"
            dd "[a [maybeUp]2003/picky/ Picky Picky Game]"
            dd "[a [maybeUp]tarot/ Alleged Tarot 2002]"
            dd "[a [maybeUp]2001/xmas.html 2001 Xmas card (SVG)]"
            dd "[a [maybeUp]how-tall-are-you/ How tall are you? quiz]"
            dd "[a http://caption.org/2000/pdc/ My Fabulous Life (2000)]"
            
            dt "Photo albums"
            dd "[a [maybeUp]2003/mull/ Mull (2003)]"
            dd "[a [maybeUp]2002/maymorning/ May Morning (2002)]" 
            dd [a [maybeUp]aviemore/ Aviemore (1999)]
            dd [a [maybeUp]bologna/ Bologna (1998)]
            dd [a [maybeUp]roch/ Roch Castle (1998)]
            dd [a http://caption.org/1997/pdc/ CAPTION97]
            dd [a http://caption.org/1996/pdc/ CAPTION96]
        }
    }
        
    if {0} { # links to old stuff
        dl class=links {
            dt Stuff
            dd [a [maybeUp]bike/ Bike]
            dd [a [maybeUp]wp/ Web Project]
            dd [a http://www.demon.co.uk/pdc/ Old Site]
            dd [a [maybeUp]muds/ MUDS (very old)]
            dd [a [maybeUp]pdc.html About Damian]
        }
    }
        
    div class=links { # icons for RSS and conformance to HTML 4
            rssIcons
            conformanceIcons
    }
}

proc archiveLinks {} {
    h3 "Archives"

    ul {
        li [a [maybeUp]2006/topics.html by topic]

        set thisYear [clock format [clock seconds] -format %Y]
        if {![file exists [maybeUp]$thisYear]} {
            incr thisYear -1
        }
        set pageYear [file tail [htmlOption subDir]]
        if {![string match 199\[7-9\] $pageYear]\
                && ![string match 20?? $pageYear]} {
            set pageYear $thisYear
        }
    
        for {set y $thisYear} {$y >= 1997} {incr y -1} {
            if {$y == $pageYear} {
                foreach entry [glob [maybeUp]$pageYear/*.e] {
                    set arName [string range [entryNameRetArName $entry] 0 6]
                    set arEntries($arName) 1
                }
                foreach arName [lsort -decreasing [array names arEntries]] {
                    if {$arName > "2003/04"} {
                        li [a [maybeUp]$arName/ [arNameRetTitle $arName]]
                    } else {
                        li [a [maybeUp]$arName.html [arNameRetTitle $arName]]
                    }
                }
            } else {
                li [a [maybeUp]$y/ $y]
            }
        }
    }
}

proc conformanceIcons {} {
    p [a* "title=Check this page for conformance to XHTML 1.0"\
	    "href=http://validator.w3.org/check/referer"\
	    [img [maybeUp]../img/valid-xhtml10.png\
	    "alt=Valid XHTML 1.0!" height=31 width=88]]
    p id=squidcredit [a* "title=Background pattern taken from the squidfingers.com collection"\
	    href=http://squidfingers.com/patterns/ \
	    "bg by squidfingers"]
    p id=jennicredit [a* "title=Photograph used in the masthead taken by Jenni Scott in the ROTA club in April 2003"\
	    href=http://www.flickr.com/photos/jinty/ \
	    "photo by Jenni Scott"]
}

proc rssIcons {} {
    p [a* "title=Link to an XML summary in RSS 2.0 format"\
	    href=[maybeUp]rss091.xml\
	    type=text/xml\
	    [img [maybeUp]../img/xml.gif alt=XML]\
    ]
}

proc beginBody {{extraTrail ""}} {
    emitTrail " [gt][gt] " $extraTrail
    push div id=body
}

proc surTitle {text} {
    p class=surTitle $text
}

proc endBody {} {
    pop
    allThoseLinks
}

proc html::q {args} {
    return "\u2018[join $args " "]\u2019"
}

proc emitReferrers {} {
    set refDir /home/pdc/devel/allegedlogs/out
    set refFile $refDir/[htmlOption subDir]/[htmlInfo outFileName].referrers
    if {[file exists $refFile]} {
	h2 Referrers
	set input [open $refFile r]
	ul {
	    while {[gets $input line] >= 0} {
		regsub "\\&" $line "\\&amp;" line
		regsub "<" $line "\\&lt;" line
		li [a [lindex $line 1] $line]
	    }
	}
	close $input

    }
}

source [file join [file dirname [info script]] abbrDefs.tcl]
    

########################################################################